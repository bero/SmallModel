(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 28.12.2018 23:55:21         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF BusinessClasses_Interface.inc}
{$DEFINE BusinessClasses_Interface.inc}

{$IFNDEF BusinessClasses_unitheader}
unit BusinessClasses;
{$ENDIF}

{$INCLUDE Attracs.inc} //PATCH

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls,  // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TClassA = class;
  TClassAList = class;
  TClassB = class;
  TClassBList = class;
  TClassBClassA = class;
  TClassBClassAList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TClassA = class(TBusinessClassesRoot)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(const NewValue: String);
    function _Get_M_price: TBACurrency;
    function _Getprice: Currency;
    function _GetClassBs: TClassBList;
    function _GetClassBClassA: TClassBClassAList;
    property M_name: TBAString read _Get_M_name;
    property M_price: TBACurrency read _Get_M_price;
    property name: String read _Getname write _Setname;
    property price: Currency read _Getprice;
  protected
  public
    property M_ClassBs: TClassBList read _GetClassBs;
    property M_ClassBClassA: TClassBClassAList read _GetClassBClassA;
    property ClassBs: TClassBList read _GetClassBs;
    property ClassBClassA: TClassBClassAList read _GetClassBClassA;
  end;

  TClassB = class(TBusinessClassesRoot)
  private
    function _Get_M_price: TBACurrency;
    function _Getprice: Currency;
    procedure _Setprice(const NewValue: Currency);
    function _GetClassAs: TClassAList;
    function _GetClassBClassA: TClassBClassAList;
    property M_price: TBACurrency read _Get_M_price;
    property price: Currency read _Getprice write _Setprice;
  protected
  public
    property M_ClassAs: TClassAList read _GetClassAs;
    property M_ClassBClassA: TClassBClassAList read _GetClassBClassA;
    property ClassAs: TClassAList read _GetClassAs;
    property ClassBClassA: TClassBClassAList read _GetClassBClassA;
  end;

  TClassBClassA = class(TBusinessClassesRoot)
  private
    function _GetClassAs: TClassA;
    function _Get_M_ClassAs: TBoldObjectReference;
    function _GetClassBs: TClassB;
    function _Get_M_ClassBs: TBoldObjectReference;
  protected
  public
    property M_ClassAs: TBoldObjectReference read _Get_M_ClassAs;
    property M_ClassBs: TBoldObjectReference read _Get_M_ClassBs;
    property ClassAs: TClassA read _GetClassAs;
    property ClassBs: TClassB read _GetClassBs;
  end;

{$IFDEF UseBoldListEnumerator}
  TBusinessClassesRootListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TBusinessClassesRoot;
    property Current: TBusinessClassesRoot read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TBusinessClassesRootListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TClassAListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TClassA;
    property Current: TClassA read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TClassAList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TClassA;
    procedure SetBoldObject(index: Integer; NewObject: TClassA);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TClassAListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TClassA): Boolean;
    function IndexOf(anObject: TClassA): Integer;
    procedure Add(NewObject: TClassA);
    function AddNew: TClassA;
    procedure Insert(index: Integer; NewObject: TClassA);
    property BoldObjects[index: Integer]: TClassA read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TClassBListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TClassB;
    property Current: TClassB read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TClassBList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TClassB;
    procedure SetBoldObject(index: Integer; NewObject: TClassB);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TClassBListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TClassB): Boolean;
    function IndexOf(anObject: TClassB): Integer;
    procedure Add(NewObject: TClassB);
    function AddNew: TClassB;
    procedure Insert(index: Integer; NewObject: TClassB);
    property BoldObjects[index: Integer]: TClassB read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TClassBClassAListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TClassBClassA;
    property Current: TClassBClassA read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TClassBClassAList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TClassBClassA;
    procedure SetBoldObject(index: Integer; NewObject: TClassBClassA);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TClassBClassAListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TClassBClassA): Boolean;
    function IndexOf(anObject: TClassBClassA): Integer;
    procedure Add(NewObject: TClassBClassA);
    function AddNew: TClassBClassA;
    procedure Insert(index: Integer; NewObject: TClassBClassA);
    property BoldObjects[index: Integer]: TClassBClassA read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}
